#version=RHEL8
#######
# INSCOM GISA RHEL 8.9 kickstart config version 1.2 - DISA RHEL STIG RHEL8 V1R12
# Author: Boyd.h.ako.ctr@army.mil
# Date: 16NOV2023
#######

# Use Text interface
text

# Skip configuration of Graphical User Interface
skipx

# Set Installation YUM repositories
repo --name="BaseOS" --baseurl=file:///run/install/sources/mount-0000-cdrom/BaseOS
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0000-cdrom/AppStream

# Pre-installation script
%pre --interpreter=/usr/bin/bash --log=/tmp/ks-pre.log --erroronfail
iotty=`tty`
exec < $iotty > $iotty 2> $iotty

printf "ignoredisk --only-use=%s\n" "$(fdisk -l | awk '$1 == "Disk" {print $2}' | grep -v -e "identifier" -e "mapper" -e "loop" | sed 's#:$##g' | sort | uniq | head -n 1)" > /tmp/install-disk.inc

function SETIP {
	printf "Will this system be using Reserved DHCP or Static IP addressing?\n1) Reserved DHCP\n2) Static IP\n"
	read "iptype"
	if [ "$iptype" = "1" ]; then
		printf "Reserved DHCP selected.\n"
		SETHOSTNAME
		printf "network  --activate --bootproto=dhcp --noipv6 --hostname=%s --onboot=yes\n" "$svrname" > /tmp/netconfig.inc
	elif [ "$iptype" = "2" ]; then
		printf "Static IP addressing selected.\n"
		SETHOSTNAME
		SETSTATICIP
		printf "network  --activate --bootproto=static --ip=%s --netmask=%s --gateway=%s --noipv6 --hostname=%s --onboot=yes --nameserver=%s,%s\n" "$ip" "$netmask" "$gw" "$svrname" "$dns1" "$dns2" > /tmp/netconfig.inc
	else
		printf "That is not a valid option.\n"
		SETIP
	fi
}
function SETSTATICIP {
	printf "You will now be prompted for the IP address, Subnet mask (255.255.255.0), Default Gateway, and Name Servers.\n\n"
	printf "IP: "
	read ip
	printf "Subnet Mask: "
	read netmask
	printf "Default Gateway: "
	read gw
	printf "First Name Server: "
	read dns1
	printf "Second Name Server: "
	read dns2
	for dnssvr in $dns1 $dns2; do
		if [ -z "$dnssvr" ]; then
			printf "You need to state two DNS servers.\n"
			SETSTATICIP
		fi
	done
}
function SETHOSTNAME {
	printf "\nWhat should the Fully Qualified Domain Name (FQDN) be?\n"
	read svrname
	if [ ! -z "$svrname" ]; then
		export svrname="$(echo $svrname | tr [:upper:] [:lower:] | tr -d [:space:])"
		printf "Setting FQDN to: %s\n" "$svrname"
	else
		SETHOSTNAME
	fi
}
function SETTZ {
	printf "NTP server (DNS to C name record is recommended): "
	read ntpsvr
	if [ -z "$ntpsvr" ]; then
		printf "Need to specify an NTP server.\n"
		SETTZ
	else
		printf "timezone Etc/UTC --isUtc --ntpservers=%s\n" "$ntpsvr" > /tmp/ntp-config.inc
	fi
}
function PREGENCFG {
	printf "\n\n\n"
	SETIP
	SETTZ
}
PREGENCFG
%end
%pre-install --interpreter=/usr/bin/bash --log=/mnt/sysroot/root/ks-pre.log
%end

# Enable SELinux
selinux --enforcing

# Enable firewall to permit SSH
firewall --enabled --ssh

# Configure Authentication settings using authselect
authselect select sssd with-smartcard with-smartcard-lock-on-removal with-faillock with-mkhomedir with-sudo

# Agree to End User License Agreement
eula --agreed

# Software installation selection
%packages
@^minimal-environment
@security-tools --optional
@smart-card --optional
@guest-agents --optional
aide
audit
bind-utils
fapolicyd
firewalld
iotop
kpatch
libsss_certmap
lsof
mailx
oddjob-mkhomedir
opensc
openscap
openscap-scanner
openssh-server
openssh-ldap
openssl-pkcs11
pam_ssh_agent_auth
policycoreutils
policycoreutils-python-utils
postfix
dos2unix
rng-tools
rsync
rsyslog
rsyslog-gnutls
scap-security-guide
sssd
tmux
usbguard
unzip
git
virt-who
vim
wget
yum-utils
-abrt
-abrt-addon-ccpp
-abrt-addon-kerneloops
-abrt-addon-python
-abrt-cli
-abrt-plugin-logger
-abrt-plugin-rhtsupport
-abrt-plugin-sosreport
-dnf-plugin-subscription-manager
-gssproxy
-insights-client
-iprutils
-plymouth
-rhc
-rsh-server
-sendmail
-subscription-manager
-telnet-server
-tftp-server
-tuned
-vsftpd
-xorg-x11-server-Xorg
-xorg-x11-server-Xwayland
-xorg-x11-server-common
-xorg-x11-server-utils

%end

# Enable services
services --enabled=kpatch,sshd

# Keyboard layouts
keyboard --xlayouts='us'

# System language
lang en_US.UTF-8

# Network information
%include /tmp/netconfig.inc

# Use CDROM installation media
cdrom

# Run the Setup Agent on first boot
firstboot --enable --reconfig

#ignoredisk --only-use=sda
%include /tmp/install-disk.inc
# Partition clearing information
zerombr
clearpart --all --initlabel
bootloader --location=mbr --timeout=30 --password="ChangeMe"
# Disk partitioning information
part /boot/efi --fstype="efi" --size=2048 --fsoptions="nosuid,umask=0077,shortname=winnt"
part /boot --fstype="xfs" --size=2048 --fsoptions="defaults,nosuid,nodev"
part pv.1144 --fstype="lvmpv" --grow
volgroup inscomgisa --reserved-percent=25 pv.1144
logvol /home --fstype="xfs" --size=2048 --name=home --vgname=inscomgisa --fsoptions="defaults,noexec,nosuid,nodev"
logvol /var --fstype="xfs" --size=2048 --name=var --vgname=inscomgisa --fsoptions="defaults,nodev"
logvol /opt/splunkforwarder --fstype="xfs" --size=2048 --name=opt_splunkforwarder --vgname=inscomgisa --fsoptions="defaults,nosuid,nodev,noexec"
logvol /var/log/audit --fstype="xfs" --size=10240 --name=var_log_audit --vgname=inscomgisa --fsoptions="defaults,nodev,noexec,nosuid"
logvol / --fstype="xfs" --size=10240 --name=root --vgname=inscomgisa
logvol /var/log --fstype="xfs" --size=2048 --name=var_log --vgname=inscomgisa --fsoptions="defaults,nodev,noexec,nosuid"
logvol swap --fstype="swap" --recommended --name=swap --vgname=inscomgisa
logvol /opt --fstype="xfs" --size=2048 --name=opt --vgname=inscomgisa --fsoptions="defaults,nodev"
logvol /var/tmp --fstype="xfs" --size=2048 --name=var_tmp --vgname=inscomgisa --fsoptions="defaults,nodev,noexec,nosuid"
logvol /tmp --fstype="xfs" --size=2048 --name=tmp --vgname=inscomgisa --fsoptions="defaults,nodev,noexec,nosuid"

# System timezone
%include /tmp/ntp-config.inc

# Root password
rootpw --plaintext "ChangeMe"

# Create initial temporary admin account for SSH access
user --name=temp.admin --gecos="Temporary Admin account for SSH access post-installation" --groups=wheel --plaintext --password="ChangeMe"

# Disable KDUMP per STIG
%addon com_redhat_kdump --disable --reserve-mb='auto'
%end

# Run OpenSCAP DISA STIG SCAP rules
%addon org_fedora_oscap
    content-type = scap-security-guide
    datastream-id = scap_org.open-scap_datastream_from_xccdf_ssg-rhel8-xccdf.xml
    xccdf-id = scap_org.open-scap_cref_ssg-rhel8-xccdf.xml
    profile = xccdf_org.ssgproject.content_profile_stig
%end

# Reboot after install
reboot --eject

# Post-installation script
%post --interpreter=/usr/bin/bash --log=/root/ks-post.log
VOLID=GISA-RHEL8.9-V1R12
export USER=root
installfilesdir="/opt/INSCOM-GISA"
installrepo="$installfilesdir/install-yum-repo.conf"
stigscript="INSCOM-GISA-RHEL8.9-V1R12-STIG-MAC-II-Sensitive.bash"
mount -t iso9660 /dev/sr0 /media
mkdir -p $installfilesdir

for dir in $(find /media/ -type d -name repodata); do 
	repodir="$(dirname $dir)"
	reponame="install-$(basename $repodir)"
	printf "[%s]\nname=%s\nbaseurl=file://%s\nenabled=1\ngpgcheck=0\n\n" "$reponame" "$reponame" "$repodir" >> $installrepo
done

dnf --config $installrepo -y module install idm:client

for file in $stigscript U_RHEL_8_V1R12_STIG_Ansible.zip U_RHEL_8_V1R12_STIG.zip ansible-collections; do
	printf "Copying %s to %s\n" "/media/$file" "$installfilesdir"
	cp -rf /media/$file $installfilesdir/
done

for zipfile in U_RHEL_8_V1R12_STIG_Ansible.zip rhel8STIG-ansible.zip U_RHEL_8_V1R12_STIG.zip; do
	zipfile="$(find $installfilesdir -type f -name "$zipfile" | head -n 1)"
	zipdir="$installfilesdir/$(basename --suffix=.zip $zipfile)"
	mkdir -p $zipdir
	unzip $zipfile -d $zipdir
done

printf "\nAdjusting DISA Ansible Playbooks to be run on RHEL 8...\n"
for yml in $(find $installfilesdir -type f -name "main.yml"); do
	printf "\tAssessing %s\n" "$yml"
        for str in ini_file sysctl; do
                if [ "$(grep -e " $str:" $yml | wc -l)" -ge "1" ]; then
                        case $str in
                                ini_file)
                                        cstr="community.general.$str"
                                ;;
                                sysctl)
                                        cstr="ansible.posix.$str"
                                ;;
                        esac
			printf "\tAdjusting %s module to %s in %s.\n" "$str" "$cstr" "$yml"
                        sed -i "s# $str:# $cstr:#g" $yml
                fi
        done
done

umount /media
printf "\n\n\n\n=======================\n"
printf "Please note the files located in %s.\n\n" "$installfilesdir"
printf "The \'ansible-core\' package is not installed. Ansible would need to be installed on this system to run the Ansible Playbook. It has not been installed due to the STIG requirements for installation and use of Ansible. An alternative is to use a dedicated system for Ansible use to run the playbook. The Ansible Playbook files located in %s has been slightly modified to allow the execution of the play FROM a RHEL 8 system. Ansible provided by RHEL 8 YUM repository has removed some Collections to execute the playbook. You will need to install the Collections in %s.\n" "$installfilesdir" "$installfilesdir/ansible-collections"
printf "\n########## How to install Ansible Collections after \'ansible-core\' package is installed ##########\n"
printf '# for reqfile in $(find %s -type f -name "requirements.yml); do cd $(dirname $reqfile); ansible-galaxy collection install -r $reqfile; done\n\n' "$installfilesdir"
printf "The Ansible Playbook does not address all the STIG requirements. It is recommended to run %s after the playbook.\n" "$installfilesdir/$stigscript"
printf "The Ansible Playbook and STIG script could not be run within the Kickstart due to services needed to be running for proper assesment and configuration.\n"
printf "After running the playbook and the STIG script, you should still conduct the manual STIG checks to latest STIG release for the initial checklist to be submitted.\n"
printf "\n\n!!! IT IS HIGHLY RECOMMENDED NOT USE THE SYSTEM AS VIRTUAL MACHINE TEMPLATE AFTER THIS POINT. !!!\nAfter the first boot many Unique Identifiers are generated for the system which can inhibit some operations and accountability in some services.\n\n"
printf "You will need to install the Splunk Universal Forwarder RPM and run the HBSS install script. Both of which are not provided by this image. Don't forget to verfy with the appropriate teams that the sytem is registering.\n"

%end

# Set password policies
%anaconda
pwpolicy root --minlen=15 --minquality=35 --strict --notempty
pwpolicy user --minlen=15 --minquality=35 --strict --notempty
pwpolicy luks --minlen=15 --minquality=35 --strict --notempty
%end
